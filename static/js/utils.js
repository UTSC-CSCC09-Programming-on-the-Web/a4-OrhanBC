/* this files was made by copilot with the prompt:*/
/*  "can you make the design more elegant?" */

(function () {
  "use strict";

  // Create a global utils object
  window.utils = {
    /**
     * Shows an error message with animation and auto-hides after a delay
     * @param {string} message - The error message to display
     * @param {number} duration - Time in milliseconds before hiding (default: 5000)
     *
     * Generated by GitHub Copilot
     */
    showError: function (message, duration = 5000) {
      let errorBox = document.getElementById("error-box");
      if (!errorBox) {
        errorBox = document.createElement("div");
        errorBox.id = "error-box";

        // Add close button to allow manual dismissal
        const closeBtn = document.createElement("span");
        closeBtn.className = "error-close";
        closeBtn.innerHTML = "Ã—";
        closeBtn.onclick = function () {
          errorBox.classList.remove("visible");
        };

        errorBox.appendChild(closeBtn);
        document.body.insertBefore(
          errorBox,
          document.querySelector("header").nextSibling,
        );
      }

      // Clear any existing timer
      if (errorBox._hideTimer) {
        clearTimeout(errorBox._hideTimer);
        errorBox._hideTimer = null;
      }

      // Set or update the text content (not overwriting the close button)
      const existingText = errorBox.querySelector(".error-message");
      if (existingText) {
        existingText.textContent = message;
      } else {
        const messageElement = document.createElement("span");
        messageElement.className = "error-message";
        messageElement.textContent = message;
        errorBox.appendChild(messageElement);
      }

      // Show the error
      errorBox.classList.add("visible");

      // Auto-hide after duration
      errorBox._hideTimer = setTimeout(() => {
        errorBox.classList.add("fade-out");
        setTimeout(() => {
          errorBox.classList.remove("visible");
          errorBox.classList.remove("fade-out");
        }, 500); // Duration of fade out animation
      }, duration);
    },

    /**
     * Applies animation to an element when toggling visibility
     * @param {HTMLElement} element - The element to animate
     */
    toggleWithAnimation: function (element) {
      if (element.classList.contains("hidden")) {
        // Show element
        element.classList.add("animatable");
        setTimeout(() => {
          element.classList.remove("hidden");
        }, 10);
      } else {
        // Hide element
        element.classList.add("hidden");
        setTimeout(() => {
          element.classList.remove("animatable");
        }, 500); // Match transition duration
      }
    },

    /**
     * Handles API requests with unified error handling and loading state
     * @param {Promise} request - The API promise to handle
     * @param {Function} successCallback - Function to call on success
     * @param {string} errorPrefix - Prefix for error message
     * @param {Function} setIsLoading - Optional function to update loading state
     * @returns {Promise} - The handled promise
     *
     * Generated by GitHub Copilot
     */
    handleApiRequest: function (
      request,
      successCallback,
      errorPrefix = "Error: ",
      setIsLoading = null,
    ) {
      if (setIsLoading) setIsLoading(true);

      return request
        .then((data) => {
          successCallback(data);
          return data;
        })
        .catch((error) => {
          this.showError(errorPrefix + error.message);
          console.error(error);
          throw error;
        })
        .finally(() => {
          if (setIsLoading) setIsLoading(false);
        });
    },

    /**
     * Validates a password for security requirements
     * @param {string} password - The password to validate
     * @returns {Object} - Object with isValid flag and error message if invalid
     *
     * Generated by GitHub Copilot
     */
    validatePassword: function (password) {
      const minLength = 8;
      const hasUppercase = /[A-Z]/.test(password);
      const hasLowercase = /[a-z]/.test(password);
      const hasNumber = /[0-9]/.test(password);
      const hasSpecialChar = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(
        password,
      );

      if (!password || password.length < minLength) {
        return {
          isValid: false,
          message: `Password must be at least ${minLength} characters long`,
        };
      }

      // Count how many criteria are met
      const criteriaCount = [
        hasUppercase,
        hasLowercase,
        hasNumber,
        hasSpecialChar,
      ].filter(Boolean).length;

      // Require at least 3 of the 4 criteria
      if (criteriaCount < 3) {
        return {
          isValid: false,
          message:
            "Password must include at least 3 of the following: uppercase letters, lowercase letters, numbers, and special characters",
        };
      }

      return {
        isValid: true,
      };
    },
  };
})();
