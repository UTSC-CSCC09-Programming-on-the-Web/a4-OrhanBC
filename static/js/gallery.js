const Gallery = (function () {
  let module = {};

  ("use strict");

  const [image, getImage, setImage] = meact.useState(null);
  const [comments, getComments, setComments] = meact.useState(null);
  const [isLoading, getIsLoading, setIsLoading] = meact.useState(false);
  const [initialLoad, getInitialLoad, setInitialLoad] = meact.useState(true);

  // Error handling helper function created by copilot with the prompt:
  // "can you make the design more elegant?"
  function showError(message) {
    let errorBox = document.querySelector("#error-box");
    if (!errorBox) {
      errorBox = document.createElement("div");
      errorBox.id = "error-box";
      document.body.insertBefore(
        errorBox,
        document.querySelector("header").nextSibling,
      );
    }

    errorBox.textContent = message;
    errorBox.classList.add("visible");

    setTimeout(() => {
      errorBox.classList.remove("visible");
      errorBox.textContent = "";
    }, 5000);
  }

  // Updated to use the shared utils.handleApiRequest function - Generated by GitHub Copilot
  function handleApiRequest(request, successCallback, errorMessage) {
    return utils.handleApiRequest(
      request,
      successCallback,
      errorMessage,
      setIsLoading,
    );
  }

  function applyFadeInAnimation(element, delay = 10) {
    element.style.opacity = "0";
    setTimeout(() => (element.style.opacity = "1"), delay);
    return element;
  }

  function navigateImage(userId, imageId, direction) {
    apiService.saveCurrentPageToStorage(0);
    handleApiRequest(
      apiService.getImage(userId, imageId),
      (newImage) => setImage(newImage),
      `Failed to load ${direction} image: `,
    );
  }

  function navigateComments(offset) {
    if (!getImage()) return;

    handleApiRequest(
      apiService.getComments(getImage().images[0].id, offset),
      (comments) => setComments(comments),
      "Failed to load comments: ",
    );
  }

  function CommentComponent(comment, userId) {
    const newComment = document.createElement("div");
    // animation and opacity added by copilot with the prompt:
    // "can you make the design more elegant?"
    newComment.classList.add("comment", "row", "animate-fade-in");

    newComment.innerHTML = `
        <div class="col-2 col-sm-3 comment-info">
          <div class="author">${comment.User.username}</div>
          <div class="date">${new Date(comment.createdAt).toLocaleDateString()}</div>
        </div>
        <div class="col-auto">${comment.comment}</div>
        <div class="col-1 delete-icon icon"></div>`;

    // Check if user is authorized to delete this comment
    const deleteIcon = newComment.querySelector(".delete-icon");
    const currentUser = apiService.getCurrentUser();
    const isOwnerOrImageOwner =
      currentUser &&
      (currentUser.id == comment.UserId || currentUser.id == userId);

    if (!apiService.isAuthenticated() || !isOwnerOrImageOwner) {
      // Remove the delete icon completely
      deleteIcon?.remove();
    } else {
      deleteIcon.addEventListener("click", function () {
        // fade out animation before deletion added by copilot with the prompt:
        // "can you make the design more elegant?"
        newComment.style.opacity = "0";
        newComment.style.transform = "translateY(10px)";
        newComment.style.transition = "opacity 0.3s ease, transform 0.3s ease";

        setTimeout(() => {
          handleApiRequest(
            apiService.deleteComment(comment.id),
            () => {
              const offset =
                getComments().pagination.total % 10 === 1 &&
                getComments().pagination.offset > 0
                  ? getComments().pagination.offset - 10
                  : getComments().pagination.offset;

              handleApiRequest(
                apiService.getComments(comment.ImageId, offset),
                (comments) => setComments(comments),
                "Failed to load comments: ",
              );
            },
            "Failed to delete comment: ",
          );
        }, 300);
      });
    }

    // Use the helper function for fade-in animation
    return applyFadeInAnimation(newComment);
  }

  function ImageComponent(image, userId) {
    const newImage = document.createElement("div");
    newImage.classList.add("animate-scale-in");

    // Apply fade-in animation
    applyFadeInAnimation(newImage, 10);

    newImage.innerHTML = `
    <div class="image-info">
        <h2 class="image-title">${image.images[0].title}</h2>
        <h3 class="authors-name">By ${image.images[0].User.username}</h3>
      </div>
      <div class="image-count">image ${image.pagination.position} of ${image.pagination.total}</div>
      <div class="image-container">
        <img
          src="/api/images/${image.images[0].id}/image"
          alt=""
          onload="this.classList.add('animate-fade-in')"
        />
      </div>
      <div class="buttons row">
        <div>
          <button class="btn btn-prev">Previous</button>
          <button class="btn btn-next">Next</button>
        </div>
        <div>
          <button class="btn btn-delete row">
            <div class="delete-icon"></div>
            <div>Delete</div>
          </button>
        </div>
      </div>`;

    newImage.querySelector(".btn-prev").addEventListener("click", function () {
      navigateImage(userId, image.pagination.prevCursor, "previous");
    });

    newImage.querySelector(".btn-next").addEventListener("click", function () {
      navigateImage(userId, image.pagination.nextCursor, "next");
    });

    if (!image.pagination.hasPrev) {
      newImage.querySelector(".btn-prev").remove();
    }

    if (!image.pagination.hasNext) {
      newImage.querySelector(".btn-next").remove();
    }

    // Hide delete button if user is not authenticated or not the owner
    const deleteButton = newImage.querySelector(".btn-delete");
    const currentUser = apiService.getCurrentUser();
    const isOwner = currentUser && currentUser.id == userId;

    if (!apiService.isAuthenticated() || !isOwner) {
      deleteButton?.remove();
    } else {
      deleteButton.addEventListener("click", function () {
        apiService.saveCurrentPageToStorage(0);
        setIsLoading(true);
        apiService.deleteImage(image.images[0].id).then(() => {
          if (image.pagination.hasNext) {
            handleApiRequest(
              apiService.getImage(userId, image.pagination.nextCursor),
              (nextImage) => setImage(nextImage),
              "Failed to load next image: ",
            );
          } else if (image.hasPrev) {
            handleApiRequest(
              apiService.getImage(userId, image.pagination.prevCursor),
              (prevImage) => setImage(prevImage),
              "Failed to load previous image: ",
            );
          } else {
            setImage(null);
            setIsLoading(false);
          }
        });
      });
    }

    return newImage;
  }

  module.render = function () {
    window.scrollTo(0, 0);
    const userId = apiService.loadCurrentGalleryFromStorage();

    if (!userId) {
      showError("No user ID found in storage. Please log in.");
      return;
    }

    document.querySelector("#backBtn").classList.remove("hidden");

    document.querySelector("main").innerHTML = `
      <div>
        <button id="formToggle" class="btn">Add Image</button>
      </div>
      <form class="form hidden" enctype="multipart/form-data" id="imageForm">
        <div class="form-title">Add an image</div>
        <div class="form-group">
          <label for="title">Image Title</label>
          <input type="text" id="title" name="title" required />
        </div>

        <div class="form-group">
          <label for="image">Image File</label>
          <input type="file" id="image" accept="image/*" name="image" required />
        </div>

        <button type="button" class="btn btn-cancel">Cancel</button>
        <button type="submit" class="btn">Submit</button>
      </form>

      <div class="gallery col-12"></div>

      <form class="form" id="commentForm">
        <div class="form-title">Add a comment</div>
        <div class="form-group">
          <label for="comment">Comment</label>
          <textarea name="comment" id="comment" required></textarea>
        </div>
        <button type="submit" class="btn">Post comment</button>
      </form>

      <div class="comments">
        <div class="comments-title">Comments</div>
        <div id="commentsList"></div>
        <div class="page-navigator row">
          <button class="btn btn-prev"></button>
          <span class="page-number">1 of 1</span>
          <button class="btn btn-next"></button>
        </div>
      </div>`;

    setIsLoading(true);
    if (apiService.loadCurrentImageIdFromStorage() !== null) {
      apiService
        .getImage(userId, apiService.loadCurrentImageIdFromStorage())
        .then((image) => {
          setImage(image);
          setInitialLoad(false);
        })
        .catch((error) => {
          if (error.message.includes("Failed to retrieve image")) {
            setInitialLoad(false);
          } else {
            showError("Failed to load initial image: " + error.message);
          }
        })
        .finally(() => {
          setIsLoading(false);
        });
    } else {
      handleApiRequest(
        apiService.getFirstImage(userId),
        (image) => {
          setImage(image);
          setInitialLoad(false);
        },
        "Failed to load first image: ",
      );
    }

    meact.useEffect(
      function () {
        if (getInitialLoad()) {
          return;
        }

        const galleryElement = document.querySelector(".gallery");
        if (!galleryElement) {
          return; // Exit if gallery element doesn't exist
        }

        if (!getImage() || getImage().images.length === 0) {
          galleryElement.innerHTML = `<div class="empty">No images in the gallery</div>`;

          // Hide instead of remove - Generated by GitHub Copilot
          document.querySelector("#commentForm")?.classList.add("hidden");
          document.querySelector(".comments")?.classList.add("hidden");
        } else {
          galleryElement.innerHTML = "";

          const imageObj = getImage();
          const imageComponent = ImageComponent(imageObj, userId);
          galleryElement.appendChild(imageComponent);

          apiService.saveCurrentImageIdToStorage(imageObj.images[0].id);

          // Show previously hidden elements and ensure they exist - Generated by GitHub Copilot
          // If these elements don't exist, we need to recreate them
          const commentsSection = document.querySelector(".comments");
          const commentForm = document.querySelector("#commentForm");

          if (!commentsSection) {
            // Create comments section if it doesn't exist
            const newCommentsSection = document.createElement("div");
            newCommentsSection.className = "comments";
            newCommentsSection.innerHTML = `
              <div class="comments-title">Comments</div>
              <div id="commentsList"></div>
              <div class="page-navigator row">
                <button class="btn btn-prev"></button>
                <span class="page-number">1 of 1</span>
                <button class="btn btn-next"></button>
              </div>
            `;
            document.querySelector("main").appendChild(newCommentsSection);
          } else {
            commentsSection.classList.remove("hidden");
          }

          if (apiService.isAuthenticated()) {
            if (!commentForm) {
              // Create comment form if it doesn't exist
              const newCommentForm = document.createElement("form");
              newCommentForm.className = "form";
              newCommentForm.id = "commentForm";
              newCommentForm.innerHTML = `
                <div class="form-title">Add a comment</div>
                <div class="form-group">
                  <label for="comment">Comment</label>
                  <textarea name="comment" id="comment" required></textarea>
                </div>
                <button type="submit" class="btn">Post comment</button>
              `;

              // Insert before comments section
              const commentsSection = document.querySelector(".comments");
              if (commentsSection) {
                document
                  .querySelector("main")
                  .insertBefore(newCommentForm, commentsSection);

                // Add event listener to new form
                newCommentForm.addEventListener("submit", function (e) {
                  e.preventDefault();

                  if (
                    !getImage() ||
                    !getImage().images ||
                    getImage().images.length === 0
                  ) {
                    utils.showError(
                      "No image is currently loaded to comment on",
                    );
                    return;
                  }

                  const content = this.querySelector("#comment").value;
                  const imageId = getImage().images[0].id;

                  handleApiRequest(
                    apiService.addComment(imageId, content),
                    () => {
                      handleApiRequest(
                        apiService.getComments(imageId, 0),
                        (comments) => setComments(comments),
                        "Failed to load comments: ",
                      );
                    },
                    "Failed to add comment: ",
                  );

                  this.reset();
                });
              }
            } else {
              commentForm.classList.remove("hidden");
            }

            // Load comments
            const commentsList = document.querySelector("#commentsList");
            if (commentsList) {
              handleApiRequest(
                apiService.getComments(
                  imageObj.images[0].id,
                  apiService.loadCurrentPageFromStorage() || 0,
                ),
                (comments) => {
                  setComments(comments);
                },
                "Failed to load comments: ",
              );
            }
          }
        }
      },
      [image, initialLoad],
    );

    meact.useEffect(
      function () {
        if (getImage() === null || !apiService.isAuthenticated()) {
          return;
        }

        const commentsObj = getComments();
        if (!commentsObj) {
          return;
        }

        const commentsList = document.querySelector("#commentsList");
        if (!commentsList) {
          return; // Exit if commentsList element doesn't exist
        }

        if (commentsObj.comments.length == 0) {
          commentsList.innerHTML = `<div class="empty">No comments</div>`;
          document.querySelector(".page-navigator")?.classList.add("hidden");
          return;
        }

        commentsList.innerHTML = "";
        document.querySelector(".page-navigator")?.classList.remove("hidden");

        commentsObj.comments.forEach((comment) => {
          const commentComponent = CommentComponent(comment, userId);
          commentsList.appendChild(commentComponent);
        });

        const pageNavigator = document.querySelector(".page-navigator span");
        if (pageNavigator) {
          pageNavigator.innerHTML = `Page ${Math.floor(commentsObj.pagination.offset / 10) + 1} of ${Math.ceil(commentsObj.pagination.total / commentsObj.pagination.limit)}`;
        }

        apiService.saveCurrentPageToStorage(commentsObj.pagination.offset);
      },
      [comments],
    );

    meact.useEffect(
      function () {
        if (getIsLoading()) {
          document.querySelector("#loading-overlay").classList.add("visible");
        } else {
          document
            .querySelector("#loading-overlay")
            .classList.remove("visible");
        }
      },
      [isLoading],
    );

    if (!apiService.isAuthenticated()) {
      // Remove elements instead of hiding them
      document.querySelector("#formToggle")?.remove();
      document.querySelector("#imageForm")?.remove();
      document.querySelector("#commentForm")?.remove();
      document.querySelector(".page-navigator")?.remove();

      // Only update commentsList if it exists
      const commentsList = document.querySelector("#commentsList");
      if (commentsList) {
        commentsList.innerHTML = `<div class="empty">Only authenticated users can view comments</div>`;
      }
    } else if (
      apiService.getCurrentUser() &&
      apiService.getCurrentUser().id != userId
    ) {
      document.querySelector("#formToggle")?.remove();
      document.querySelector("#imageForm")?.remove();
    } else {
      document
        .querySelector("#formToggle")
        .addEventListener("click", function () {
          // form animation added by copilot with the prompt:
          // "can you make the design more elegant?"
          const form = document.querySelector("#imageForm");
          form.classList.add("animatable");
          setTimeout(() => form.classList.toggle("hidden"), 10);
          this.classList.toggle("hidden");
        });

      document
        .querySelector(".btn-cancel")
        .addEventListener("click", function () {
          document.querySelector("#imageForm").classList.toggle("hidden");
          document.querySelector("#formToggle").classList.toggle("hidden");
        });

      document
        .querySelector("#imageForm")
        .addEventListener("submit", function (e) {
          e.preventDefault();

          const title = this.querySelector("#title").value;
          const image = this.querySelector("#image").files[0];

          // Disable form and show loading state
          const submitButton = this.querySelector('button[type="submit"]');
          const cancelButton = this.querySelector(".btn-cancel");
          submitButton.disabled = true;
          cancelButton.disabled = true;
          setIsLoading(true);

          apiService
            .addImage(title, userId, image)
            .then((newImage) => {
              return apiService.getImage(userId, newImage.id);
            })
            .then((image) => {
              setImage(image);
              this.reset();
            })
            .catch((error) => {
              showError("Failed to upload or load new image: " + error.message);
            })
            .finally(() => {
              // Re-enable form elements
              submitButton.disabled = false;
              cancelButton.disabled = false;
              document.querySelector(".btn-cancel").click();
              setIsLoading(false);
            });
        });
    }

    if (apiService.isAuthenticated()) {
      document
        .querySelector("#commentForm")
        ?.addEventListener("submit", function (e) {
          e.preventDefault();

          if (
            !getImage() ||
            !getImage().images ||
            getImage().images.length === 0
          ) {
            utils.showError("No image is currently loaded to comment on");
            return;
          }

          const content = this.querySelector("#comment").value;
          const imageId = getImage().images[0].id;

          handleApiRequest(
            apiService.addComment(imageId, content),
            () => {
              handleApiRequest(
                apiService.getComments(imageId, 0),
                (comments) => setComments(comments),
                "Failed to load comments: ",
              );
            },
            "Failed to add comment: ",
          );

          this.reset();
        });

      const prevBtn = document.querySelector(".page-navigator .btn-prev");
      if (prevBtn) {
        prevBtn.addEventListener("click", function () {
          const comments = getComments();
          if (!comments || comments.pagination.offset === 0) {
            return;
          }

          navigateComments(comments.pagination.offset - 10);
        });
      }

      const nextBtn = document.querySelector(".page-navigator .btn-next");
      if (nextBtn) {
        nextBtn.addEventListener("click", function () {
          const comments = getComments();
          if (!comments || !comments.pagination.hasMore) {
            return;
          }

          navigateComments(comments.pagination.offset + 10);
        });
      }
    }
  };

  return module;
})();
