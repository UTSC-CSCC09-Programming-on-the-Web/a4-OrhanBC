(function () {
  "use strict";

  const [users, getUsers, setUsers] = meact.useState(null);
  const [currentGallery, getCurrentGallery, setCurrentGallery] = meact.useState(
    apiService.loadCurrentGalleryFromStorage(),
  );
  // Add loading state for users - Generated by GitHub Copilot
  const [isLoadingUsers, getIsLoadingUsers, setIsLoadingUsers] =
    meact.useState(false);
  // Track if we're currently loading more users through scroll - Generated by GitHub Copilot
  const [isLoadingMoreUsers, getIsLoadingMoreUsers, setIsLoadingMoreUsers] =
    meact.useState(false);

  /**
   * Creates an enhanced user component with styled elements
   * @param {Object} user - User object containing id and username
   * @returns {HTMLElement} - The user component DOM element
   *
   *
   */
  const UserComponent = function (user) {
    const userElement = document.createElement("div");
    userElement.classList.add("user", "col-12");
    // Adding data attribute for easier reference
    userElement.dataset.userId = user.id;
    userElement.innerHTML = `
      <div class="username">${user.username}</div>
      <button class="btn btn-outline">View Gallery</button>
    `;

    userElement.querySelector("button").addEventListener("click", function () {
      setCurrentGallery(user.id);
    });
    return userElement;
  };

  /**
   * Renders the home page with enhanced user list container
   *
   *
   */
  const renderHomePage = function () {
    document.querySelector("#backBtn").classList.add("hidden");

    document.querySelector("main").innerHTML = `
      <div class="users row">
        <!-- Will be filled with user components -->
      </div>
      <!-- Loading indicator for pagination -->
      <div class="loading-indicator hidden">Loading more users...</div>
      `;
  };

  const updateUsers = function () {
    const usersContainer = document.querySelector(".users");
    if (!usersContainer) return;

    usersContainer.innerHTML = "";

    if (!getUsers() || getUsers().users.length === 0) {
      usersContainer.innerHTML = `<div class="empty">No users found</div>`;
      return;
    }

    getUsers().users.forEach((user) => {
      const userElement = UserComponent(user);
      userElement.classList.add("animate-fade-in");
      usersContainer.appendChild(userElement);
    });
  };

  const renderCredits = function () {
    document.querySelector("#backBtn").classList.remove("hidden");
    document.querySelector("main").innerHTML = `<h1>Credits</h1>
    <h2>Icons</h2>
    <ul>
      <li>
        Icons made by
        <a href="http://www.flaticon.com" title="Flaticon">www.flaticon.com</a>
      </li>
    </ul>
    <h2>Design</h2>
    <ul>
      <li>
        Initial design insporation from
        <a href="https://stitch.withgoogle.com">Stitch</a> with the prompt:
        <p>
          I'm trying to make a single page application with the following
          front-end features: In this part, you are going to design the UI (HTML
          and CSS) of The Web Gallery app. Our UI to contain the following
          components: the add-image form allows users to add a picture from the
          web to the gallery by copying and pasting its url into the form (we
          will enable file upload in the next assignment). This component should
          contain at least: a button to toggle (show/hide) the "Add Image" form
          The "Add Image" form should contain Image title Author's Name Image
          URL the image display shows current image. This component should
          contain at least: the image currently displayed the image title the
          image author two buttons to move to the previous and next image in the
          gallery a delete button the total number of images in the gallery the
          comment form allows users to add comments to the current picture. This
          component should contain at least: The author's name The comment the
          comment section that shows the most recent comments for the current
          picture. This component should contain at least: the 10 most recent
          comments only. Each comment should be composed of: the author's name
          the date when the comment was posted the text a delete button two
          buttons to move to the older or later series of 10 comments (still
          related to the same image)
        </p>
        <img src="media/stitch.png" style="width: 500px" alt="" />
      </li>
      <li>I then wrote the HTML and CSS code based off the design above.</li>
      <li>meact.js and cols.css files are take from the labs.</li>
      <li>
        Finally, I used co-pilot to enhance the design and add transitions,
        animitaions etc. with the promtp: "can you make the design more
        elegant?"
      </li>
    </ul>
    <h2>Javascript</h2>
    <ul>
      <li>
        Javascript code was improvide by Copilot to adhere to DRY principles.
      </li>
      <li>
        Majority of the SPA code were written by me, but some enchancements
        were made by Copilot with the prompt: "i want you to do two things:

polish some ui elements such add image button, go back to galleries button, the span element in the navbar and user components on the home page. you can add styling

organize js code where necessary. for example, gallery.js has a function to handle api requests meanwhile index.js doesn't use that functio. fix things like that. don't change the main logic. also add loading state for getting users similar to gallery image loading. have more detailed error displays if possible.

note this is a pure spa and you shouldn't add any more html files and again the logic should be the exact same."
      </li>
      <li>
        The password validation on the frontend was added by Copilot with the prompt: "add some basic password validation"
      </li>
    </ul>
    <h2>API</h2>
    <ul>
      <li>
        OpenAPI Specification for the Photo Gallery API was generated by
        Copilot.
      </li>
      <li>
        All the validators were generated by Copilot with the prompt: "add validators for all the endpoints."
      </li>
      <li>
        I asked Copilot what the best way to add token based authentication is. I wrote the code based on its suggestions.
      </li>
      <li>
        The password validation on the backed was generated by Copilot with the following prompt: "add the same password validation on backend".
      </li>
      <li>
        Better error display for login and signup was added by Copilot with the prompt: "when a guest tries to login as a user that doesn't exist or sign up as a user that already exists. i want detailed error to be shown such user doesn't exist or user already exists"
      </li>
    </ul>`;
  };

  window.onload = function () {
    if (getCurrentGallery()) {
      Gallery.render();
    }

    // Use the shared API request handler with loading state - Generated by GitHub Copilot
    utils.handleApiRequest(
      apiService.getUsers(),
      (data) => setUsers(data),
      "Failed to load users: ",
      setIsLoadingUsers,
    );

    if (apiService.isAuthenticated()) {
      document.querySelector("#loginBtn")?.remove();
      document.querySelector("#signUpBtn")?.remove();
      document.querySelector("#loginForm")?.remove();
      document.querySelector("#signUpForm")?.remove();

      document.querySelector("header span").textContent =
        `You're signed in as ${apiService.getCurrentUser().username}`;

      document
        .querySelector("#logOutBtn")
        ?.addEventListener("click", function () {
          apiService.logOut().then(() => {
            window.location.reload();
          });
        });

      document
        .querySelector("#myGallery")
        ?.addEventListener("click", function () {
          setCurrentGallery(apiService.getCurrentUser().id);
        });
    } else {
      document.querySelector("#logOutBtn")?.remove();
      document.querySelector("#myGallery")?.remove();

      document
        .querySelector("#loginForm")
        ?.addEventListener("submit", function (e) {
          e.preventDefault();

          // Clear previous feedback
          document.querySelector("#username-login-feedback").textContent = "";
          document.querySelector("#password-login-feedback").textContent = "";

          const username = this.querySelector("#username").value;
          const password = this.querySelector("#password").value;

          // Security-focused login feedback - Generated by GitHub Copilot
          apiService
            .login(username, password)
            .then(() => window.location.reload())
            .catch((error) => {
              const errorMsg = error.message;

              // For security reasons, we show a generic error message that doesn't reveal
              // whether the username exists or not - Generated by GitHub Copilot
              if (errorMsg === "Invalid username or password") {
                // Show the error message in the form rather than as a popup
                document.querySelector("#password-login-feedback").textContent =
                  "The username or password you entered is incorrect";
              } else {
                // Generic error handling for other cases
                utils.showError(errorMsg);
              }
            });
        });

      // Enhanced sign-up form with password validation - Generated by GitHub Copilot
      document
        .querySelector("#signUpForm")
        ?.addEventListener("submit", function (e) {
          e.preventDefault();
          const username = this.querySelector("#newUsername").value;
          const password = this.querySelector("#newPassword").value;
          const confirmPassword = this.querySelector("#confirmPassword").value;

          // First check if passwords match
          if (password !== confirmPassword) {
            utils.showError("Passwords do not match");
            return;
          }

          // Validate password strength
          const passwordValidation = utils.validatePassword(password);
          if (!passwordValidation.isValid) {
            utils.showError(passwordValidation.message);
            return;
          }

          // Clear previous feedback
          document.querySelector("#username-signup-feedback").textContent = "";

          // Enhanced signup with detailed error feedback - Generated by GitHub Copilot
          apiService
            .signUp(username, password)
            .then(() => window.location.reload())
            .catch((error) => {
              const errorMsg = error.message;

              // Show specific feedback based on error type
              if (errorMsg === "Username already exists") {
                document.querySelector(
                  "#username-signup-feedback",
                ).textContent = "Username already exists";
              } else {
                // Generic error handling for other cases
                utils.showError(errorMsg);
              }
            });
        });

      document
        .querySelector("#loginBtn")
        ?.addEventListener("click", function () {
          const signUpForm = document.querySelector("#signUpForm");
          signUpForm.classList.add("hidden");
          const loginForm = document.querySelector("#loginForm");
          utils.toggleWithAnimation(loginForm);
        });

      document
        .querySelector("#signUpBtn")
        ?.addEventListener("click", function () {
          const signUpForm = document.querySelector("#signUpForm");
          utils.toggleWithAnimation(signUpForm);
          const loginForm = document.querySelector("#loginForm");
          loginForm.classList.add("hidden");
        });

      document
        .querySelector("#loginForm .btn-cancel")
        ?.addEventListener("click", function () {
          const loginForm = document.querySelector("#loginForm");
          utils.toggleWithAnimation(loginForm);
        });

      document
        .querySelector("#signUpForm .btn-cancel")
        ?.addEventListener("click", function () {
          const signUpForm = document.querySelector("#signUpForm");
          utils.toggleWithAnimation(signUpForm);
        });

      // Real-time password validation - Generated by GitHub Copilot
      const passwordInput = document.querySelector("#newPassword");
      const confirmInput = document.querySelector("#confirmPassword");
      const passwordValidation = document.querySelector("#password-validation");
      const passwordMatch = document.querySelector("#password-match");

      if (
        passwordInput &&
        confirmInput &&
        passwordValidation &&
        passwordMatch
      ) {
        // Initialize validation display
        passwordValidation.style.display = "none";
        passwordMatch.style.display = "none";

        // Add event listener for password input
        passwordInput.addEventListener("input", function () {
          const password = this.value;

          // Only show validation if user has started typing
          if (password.length > 0) {
            passwordValidation.style.display = "block";

            // Update criteria indicators
            const lengthCriteria = document.querySelector(
              ".password-criteria .length",
            );
            const uppercaseCriteria = document.querySelector(
              ".password-criteria .uppercase",
            );
            const lowercaseCriteria = document.querySelector(
              ".password-criteria .lowercase",
            );
            const numberCriteria = document.querySelector(
              ".password-criteria .number",
            );
            const specialCriteria = document.querySelector(
              ".password-criteria .special",
            );
            const strengthIndicator = document.querySelector(
              ".password-strength span",
            );

            // Check each criterion
            const hasLength = password.length >= 8;
            const hasUppercase = /[A-Z]/.test(password);
            const hasLowercase = /[a-z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSpecial = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(
              password,
            );

            // Update classes for each criterion
            lengthCriteria.className = hasLength
              ? "length met"
              : "length unmet";
            uppercaseCriteria.className = hasUppercase
              ? "uppercase met"
              : "uppercase unmet";
            lowercaseCriteria.className = hasLowercase
              ? "lowercase met"
              : "lowercase unmet";
            numberCriteria.className = hasNumber
              ? "number met"
              : "number unmet";
            specialCriteria.className = hasSpecial
              ? "special met"
              : "special unmet";

            // Count criteria met for strength assessment
            const criteriaMet = [
              hasLength,
              hasUppercase,
              hasLowercase,
              hasNumber,
              hasSpecial,
            ].filter(Boolean).length;

            // Set strength indicator
            if (criteriaMet <= 2) {
              strengthIndicator.textContent = "Too weak";
              passwordValidation.className = "password-validation invalid";
            } else if (criteriaMet === 3) {
              strengthIndicator.textContent = "Medium";
              passwordValidation.className = "password-validation";
            } else if (criteriaMet === 4) {
              strengthIndicator.textContent = "Strong";
              passwordValidation.className = "password-validation valid";
            } else {
              strengthIndicator.textContent = "Very strong";
              passwordValidation.className = "password-validation valid";
            }

            // Check if passwords match if confirm field has content
            if (confirmInput.value) {
              checkPasswordsMatch();
            }
          } else {
            passwordValidation.style.display = "none";
          }
        });

        // Check if passwords match
        function checkPasswordsMatch() {
          const password = passwordInput.value;
          const confirmPassword = confirmInput.value;

          if (confirmPassword.length > 0) {
            passwordMatch.style.display = "block";
            if (password === confirmPassword) {
              passwordMatch.textContent = "Passwords match";
              passwordMatch.className = "password-validation valid";
            } else {
              passwordMatch.textContent = "Passwords do not match";
              passwordMatch.className = "password-validation invalid";
            }
          } else {
            passwordMatch.style.display = "none";
          }
        }

        // Add event listener for confirm password input
        confirmInput.addEventListener("input", checkPasswordsMatch);
      }
    }

    document.querySelector("#backBtn").addEventListener("click", function () {
      setCurrentGallery(null);
    });

    document
      .querySelector(".credits a")
      .addEventListener("click", function (e) {
        e.preventDefault();
        renderCredits();
      });

    document.querySelector("#title").addEventListener("click", function () {
      setCurrentGallery(null);
      renderHomePage();
      updateUsers();
    });

    renderHomePage();
    updateUsers();

    // Enhanced scroll-based pagination with loading indicator - Generated by GitHub Copilot
    document.addEventListener("scroll", function () {
      const usersData = getUsers();
      const cursor = usersData?.nextCursor;

      if (cursor == null) return; // No more users to load

      if (
        document.documentElement.scrollHeight - window.innerHeight <=
        document.documentElement.scrollTop + 50
      ) {
        // Check if we're already loading more users
        if (getIsLoadingMoreUsers()) return;

        setIsLoadingMoreUsers(true); // Set loading state to true

        // Show loading indicator
        const loadingIndicator = document.querySelector(".loading-indicator");
        if (loadingIndicator) loadingIndicator.classList.remove("hidden");

        utils
          .handleApiRequest(
            apiService.getUsers(cursor),
            (data) => {
              // Merge the new users with the existing ones
              const mergedUsers = {
                users: [...usersData.users, ...data.users],
                nextCursor: data.nextCursor,
              };
              setUsers(mergedUsers);
            },
            "Failed to load more users: ",
          )
          .finally(() => {
            setIsLoadingMoreUsers(false);
            // Hide loading indicator
            const loadingIndicator =
              document.querySelector(".loading-indicator");
            if (loadingIndicator) loadingIndicator.classList.add("hidden");
          });
      }
    });

    // Enhanced useEffect hook for users loading state - Generated by GitHub Copilot
    meact.useEffect(
      function () {
        const usersContainer = document.querySelector(".users");
        if (!usersContainer) return;

        updateUsers();
      },
      [users],
    );

    // Loading state effect - Generated by GitHub Copilot
    meact.useEffect(
      function () {
        const loadingOverlay = document.querySelector("#loading-overlay");
        if (!loadingOverlay) return;

        if (getIsLoadingUsers()) {
          loadingOverlay.classList.add("visible");
        } else {
          loadingOverlay.classList.remove("visible");
        }
      },
      [isLoadingUsers],
    );

    meact.useEffect(
      function () {
        if (getCurrentGallery() == null || getCurrentGallery == undefined) {
          apiService.saveCurrentGalleryToStorage(null);
          renderHomePage();
          updateUsers();
          return;
        }

        apiService.saveCurrentGalleryToStorage(getCurrentGallery());
        apiService.clearStorage();

        Gallery.render();
      },
      [currentGallery],
    );
  };
})();
