let apiService = (function () {
  let module = {};

  let user = null;

  // Helper function to get authentication headers
  function getAuthHeaders(isFormData = false) {
    const token = sessionStorage.getItem("token");
    if (isFormData) {
      return token
        ? {
            Authorization: `Bearer ${token}`,
          }
        : {};
    } else {
      return token
        ? {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          }
        : {
            "Content-Type": "application/json",
          };
    }
  }

  // // Helper function to handle unauthorized errors
  // function handleUnauthorized(response) {
  //   if (response.status === 401) {
  //     sessionStorage.removeItem("token");
  //     sessionStorage.removeItem("userId");
  //     sessionStorage.removeItem("username");
  //     throw new Error("Your session has expired. Please log in again.");
  //   }
  //   return response;
  // }

  module.signUp = function (username, password) {
    return fetch("/api/auth/signup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ username, password }),
    })
      .then(async (response) => {
        // Enhanced error handling to extract detailed error messages - Generated by GitHub Copilot
        if (!response.ok) {
          const errorData = await response.json().catch(() => {
            // If JSON parsing fails, use generic error message
            throw new Error("Failed to sign up");
          });

          // Throw the specific error message from the backend
          throw new Error(errorData.error || "Failed to sign up");
        }
        return response.json();
      })
      .then((data) => {
        sessionStorage.setItem("token", data.token);
        sessionStorage.setItem("userId", data.user.id);
        sessionStorage.setItem("username", username);
        return data;
      });
  };

  module.login = function (username, password) {
    return fetch("/api/auth/login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ username, password }),
    })
      .then(async (response) => {
        // Enhanced error handling to extract detailed error messages - Generated by GitHub Copilot
        if (!response.ok) {
          const errorData = await response.json().catch(() => {
            // If JSON parsing fails, use generic error message
            throw new Error("Failed to log in");
          });

          // Throw the specific error message from the backend
          throw new Error(errorData.error || "Failed to log in");
        }
        return response.json();
      })
      .then((data) => {
        sessionStorage.setItem("token", data.token);
        sessionStorage.setItem("userId", data.user.id);
        sessionStorage.setItem("username", username);
        return data;
      });
  };

  module.logOut = function () {
    return fetch("/api/auth/logout", {
      method: "POST",
      headers: getAuthHeaders(),
    }).then((response) => {
      if (!response.ok) {
        throw new Error("Failed to log out");
      }
      sessionStorage.removeItem("token");
      sessionStorage.removeItem("userId");
      sessionStorage.removeItem("username");
      return response.json();
    });
  };

  module.isAuthenticated = function () {
    const token = sessionStorage.getItem("token");
    return token !== null && token !== undefined && token !== "";
  };

  module.getCurrentUser = function () {
    if (!this.isAuthenticated()) return null;

    return {
      id: sessionStorage.getItem("userId"),
      username: sessionStorage.getItem("username"),
    };
  };

  module.addImage = function (title, userId, imageFile) {
    const formData = new FormData();
    formData.append("title", title);
    formData.append("image", imageFile);

    return (
      fetch(`/api/users/${userId}/images`, {
        method: "POST",
        headers: getAuthHeaders(true), // true indicates it's a FormData request
        body: formData,
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to upload image");
          }
          return response.json();
        })
    );
  };

  module.getImage = function (userId, cursor) {
    return (
      fetch(`/api/users/${userId}/images?cursor=${cursor}`, {
        method: "GET",
        headers: getAuthHeaders(),
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to retrieve image");
          }
          return response.json();
        })
    );
  };

  module.getFirstImage = function (userId) {
    return (
      fetch(`/api/users/${userId}/images?isLatestRequest=true`, {
        method: "GET",
        headers: getAuthHeaders(),
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to retrieve first image");
          }
          return response.json();
        })
    );
  };

  module.deleteImage = function (imageId) {
    return (
      fetch(`/api/images/${imageId}`, {
        method: "DELETE",
        headers: getAuthHeaders(),
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to delete image");
          }
        })
    );
  };

  module.addComment = function (imageId, content) {
    return (
      fetch(`/api/images/${imageId}/comments`, {
        method: "POST",
        headers: getAuthHeaders(),
        body: JSON.stringify({
          comment: content,
        }),
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to add comment");
          }
          return response.json();
        })
    );
  };

  module.deleteComment = function (commentId) {
    return (
      fetch(`/api/comments/${commentId}`, {
        method: "DELETE",
        headers: getAuthHeaders(),
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to delete comment");
          }
        })
    );
  };

  module.getComments = function (imageId, offset) {
    return (
      fetch(`/api/images/${imageId}/comments?offset=${offset}`, {
        method: "GET",
        headers: getAuthHeaders(),
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to retrieve comments");
          }
          return response.json();
        })
    );
  };

  module.getUsers = function (cursor = null) {
    const query = cursor ? `?cursor=${cursor}` : "";
    return (
      fetch(`/api/users${query}`, {
        method: "GET",
      })
        // .then(handleUnauthorized)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to retrieve users");
          }
          return response.json();
        })
    );
  };

  module.loadCurrentImageIdFromStorage = function () {
    const imageId = localStorage.getItem("currentImageId");
    return imageId ? JSON.parse(imageId) : null;
  };

  module.saveCurrentImageIdToStorage = function (imageId) {
    localStorage.setItem("currentImageId", JSON.stringify(imageId));
  };

  module.loadCurrentPageFromStorage = function () {
    const page = localStorage.getItem("currentPage");
    return page ? JSON.parse(page) : 0;
  };

  module.saveCurrentPageToStorage = function (page) {
    localStorage.setItem("currentPage", JSON.stringify(page));
  };

  module.clearCurrentPageFromStorage = function () {
    localStorage.removeItem("currentPage");
  };

  module.loadCurrentGalleryFromStorage = function () {
    const userId = sessionStorage.getItem("gallery");
    return userId ? JSON.parse(userId) : null;
  };

  module.saveCurrentGalleryToStorage = function (gallery) {
    sessionStorage.setItem("gallery", JSON.stringify(gallery));
  };

  module.clearStorage = function () {
    localStorage.removeItem("currentImageId");
    localStorage.removeItem("currentPage");
  };

  return module;
})();
