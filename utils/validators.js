/**
 * Validation middleware for API endpoints cdreated by copilot
 */
import {
  validateId,
  validatePositiveInteger,
  validateCursor,
  validateFields,
  validatePasswordStrength,
} from "./validation.js";

/**
 * Creates middleware for validating user authentication input including password strength
 * @returns {Function} Express middleware
 *
 * Generated by GitHub Copilot
 */
export function validateAuthInput(req, res, next) {
  const { username, password } = req.body;

  // Validate required fields
  if (!username || !password) {
    return res.status(400).json({
      error: "Invalid input",
      details: {
        username: !username ? "Username is required" : undefined,
        password: !password ? "Password is required" : undefined,
      },
    });
  }

  // Username validation
  if (
    typeof username !== "string" ||
    username.length < 3 ||
    username.length > 30
  ) {
    return res.status(400).json({
      error: "Invalid input",
      details: {
        username: "Username must be between 3 and 30 characters",
      },
    });
  }

  // Password strength validation
  const passwordValidation = validatePasswordStrength(password);
  if (!passwordValidation.valid) {
    return res.status(400).json({
      error: "Invalid input",
      details: {
        password: passwordValidation.error,
      },
    });
  }

  next();
}

/**
 * Creates middleware for validating pagination parameters
 */
export function validatePagination(req, res, next) {
  // Validate limit
  const limitValidation = validatePositiveInteger(req.query.limit);
  if (req.query.limit !== undefined && !limitValidation.valid) {
    return res.status(422).json({
      error: "Invalid query parameter",
      details: { limit: limitValidation.error },
    });
  }

  // Validate offset
  const offsetValidation = validatePositiveInteger(req.query.offset, 0);
  if (req.query.offset !== undefined && !offsetValidation.valid) {
    return res.status(422).json({
      error: "Invalid query parameter",
      details: { offset: offsetValidation.error },
    });
  }

  // Validate cursor if present
  const cursorValidation = validateCursor(req.query.cursor);
  if (req.query.cursor !== undefined && !cursorValidation.valid) {
    return res.status(422).json({
      error: "Invalid query parameter",
      details: { cursor: cursorValidation.error },
    });
  }

  // If we get here, all validations passed
  // Add validated values to request object for handlers to use
  req.validatedQuery = {
    limit: limitValidation.value ?? undefined,
    offset: offsetValidation.value ?? undefined,
    cursor: cursorValidation.value ?? undefined,
  };

  next();
}

/**
 * Creates middleware for validating ID parameters
 * @param {string} paramName - The name of the ID parameter
 */
export function validateIdParam(paramName = "id") {
  return (req, res, next) => {
    const validation = validateId(req.params[paramName]);

    if (!validation.valid) {
      return res.status(422).json({
        error: `Invalid ${paramName} format`,
        details: { [paramName]: validation.error },
      });
    }

    // Store validated ID for handlers to use
    req.validatedParams = {
      ...req.validatedParams,
      [paramName]: validation.value,
    };

    next();
  };
}

/**
 * Creates middleware for validating image input
 */
export function validateImageInput(req, res, next) {
  // Check file upload
  if (!req.file) {
    return res.status(422).json({ error: "Image file is required" });
  }

  // Validate required fields
  const fieldRules = {
    title: { type: "string", required: true },
  };

  const validation = validateFields(req.body, fieldRules);

  if (!validation.valid) {
    return res.status(422).json({
      error: "Invalid input",
      details: validation.errors,
    });
  }

  next();
}

/**
 * Creates middleware for validating comment input
 */
export function validateCommentInput(req, res, next) {
  // Validate required fields
  const fieldRules = {
    comment: { type: "string", required: true },
  };

  const validation = validateFields(req.body, fieldRules);

  if (!validation.valid) {
    return res.status(422).json({
      error: "Invalid input",
      details: validation.errors,
    });
  }

  next();
}
